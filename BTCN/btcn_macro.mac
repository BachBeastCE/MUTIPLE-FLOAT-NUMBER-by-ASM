# xuat cau nhac
.macro get_s(%text)
	li $v0,4
	la $a0, %text
	syscall
.end_macro

# xuat so thuc
.macro get_f(%text,%float_num)
	get_s %text
	l.s $f12, %float_num
	addi $v0,$zero,2
	syscall
.end_macro

.macro random_float(%float_num)	
	li $v0, 30			# Lấy thời gian hệ thống			
	syscall
	move $t0, $v0			# Lưu kết quả của syscall 30 vào $t0

	li $v0, 40			# Thiết lập seed sử dụng thời gian hiện tại
	move $a0, $t0
	syscall
					
	li $a0,1000			# So nguyen (1000)
	mtc1 $a0, $f1 
	cvt.s.w $f1, $f1 		#Chuyen so nguyen sang so thuc 
	
random_float:				# So thuc random (0;1)
	li $v0, 43			# Sinh so thuc float [0;1)
	syscall
	mfc1 $t1,$f0
	beq $t1,0,random_float
	
	mul.s $f0,$f0,$f1		#Nhan so thuc a(0,1)x 1000
	s.s $f0, %float_num		#Luu lai so thuc
.end_macro
	
.macro set_precision(%float_num,%count,%string_result,%num_digit)
	#s0: 10^n+1
	#s1: So can lam tron
	#S2: dau cua so
	#s3: so chu so lam tron
	#s4: so luong chu so
	#s5: dia chi mang 
	#s6: be hon 1
	
	addi $s0,$0,1 				#10^(n)
	addi $t1,$0,0 				#i=0
	lw $s3,%count 				#load precision_count
	addi $t2,$s3,1 				#precision_count+1
	addi $t3,$0,10 				# t3 = 10
while: 	
	beq $t1,$t2,endwhile 			#i = precision_count+1
      	addi $t1,$t1,1				#i+=1
      	mul  $s0,$s0,$t3 			#s0*=10
      	j while
      	
endwhile: 
      	mtc1 $s0, $f0      			# Chuyển kết quả từ $t0 sang thanh ghi số thực $f0
	cvt.s.w $f0, $f0   			# Chuyển đổi số nguyên trong $f0 thành số thực	
	l.s $f1, %float_num  			# Load giá tri float_num vào thanh ghi $f1		
	mul.s $f2,$f0,$f1			# float_num * 10^(n), tich f2
	cvt.w.s $f2, $f2    			# Chuyển đổi số thực trong $f2 sang số nguyên
	mfc1 $s1, $f2       			# Chuyển kết quả từ thanh ghi số thực $f2 sang thanh ghi số nguyên $s1     	
     	
     	slti $s2,$s1,0				#dau cua so
     	bne  $s2,1, pos				#doi sang so duong neu la so am
     	neg $s1,$s1
	
pos:     	
     	sltu $s6,$s1,$s0			# be hon 1		
     	div $s1,$t3 
     	mflo $s1				#phan lam tron
     	mfhi $t1
     	slti $t0,$t1,5
     	beq $t0,1, precision
     	addi $s1,$s1,1				#da lam tron     	
     	
precision:
	li $s4,0
	la $s5,%string_result
	
loop:		
	beq $s4,$s3,point	
	div $s1, $t3
	mflo $t1
	mfhi $t2
	mflo $s1
    	li $t0, '0'  # Load the character '0' into $t0
    	add $t0,$t0,$t2
	j set
	
point:		
	li $t0, '.'  # Load the character '0' into $t0
    	# Store the character in the first byte of the array
set:   	sb $t0,%string_result($s4)  # Store the character in the first byte of the array
	addi $s4,$s4,1			#cong 1 so chu so
	beq $t1,$zero,less_than_1
	j loop

less_than_1:
	bne $s6,1, sign
	li $t0, '.'
	sb $t0,%string_result($s4)
	addi $s4,$s4,1
	li $t0, '0'
	sb $t0,%string_result($s4)
	addi $s4,$s4,1
	
sign:	
	bne $s2,1, print
	li $t0, '-'
	sb $t0,%string_result($s4)
	addi $s4,$s4,1

print:
	#Reverse
	divu $t0,$s4, 2		#n/2
	li  $t1,0 		#str[0]
	subi $t2,$s4,1		#str[n-1]
	li $t3,0     		#i=0

for:	
	beq $t3,$t0, endfor
	lb $t4,%string_result($t1)
	lb $t5,%string_result($t2)
	sb $t5,%string_result($t1)
	sb $t4,%string_result($t2)	
	addi $t1,$t1,1
	subi $t2,$t2,1				
	addi $t3,$t3,1
	j for
endfor:
	#Print result
	li $t0, '\0'
	sb $t0,%string_result($s4)
	get_s %string_result
     	sw $s4, %num_digit		
.end_macro	
		
		
.macro write_file(%Text,%Float_string,%endl,%num_digit,%text_digit)
	li $v0, 15
    	move $a0, $s7
    	la $a1, %Text
    	lw $a2, %text_digit
    	syscall
    	
    	li $v0, 15
    	move $a0, $s7
    	li $v0, 15
    	la $a1, %Float_string
    	lw $a2, %num_digit
    	syscall
    	
    	li $v0, 15
    	move $a0, $s7
    	li $v0, 15
    	la $a1, %endl
    	li $a2, 1
    	syscall

.end_macro

